buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven {
            url "http://repo.spring.io/snapshot"
        }
        maven {
            url "http://repo.spring.io/milestone"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:+"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath 'org.ajoberstar:gradle-git:0.12.0'

        if (project.hasProperty("coverage")) {
            classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
        }
    }
}

def commonProject = project(':common')
def acceptanceTestsProject = project(':acceptance-tests')

allprojects {
    apply plugin: 'docker'
    apply plugin: 'groovy'
}

docker {
    baseImage = 'aglover/java8-pier'
}

/*task docker(type: Docker) {
    dryRun true
    addFile("acceptance-tests", "/acceptance-tests")
    String m2Path = "${System.getenv('HOME')}/.m2"
    String gradlePath = "${System.getenv('HOME')}/.gradle"
    if (new File(m2Path).exists()) {
        addFile(m2Path, "/root/.m2")
    }
    if (new File(gradlePath).exists()) {
        addFile(gradlePath, "/root/.gradle")
    }
    workingDir('/acceptance-tests')
}*/

configure(subprojects) {

    apply plugin: 'spring-boot'
    apply plugin: 'maven-publish'
    apply plugin: 'docker'

    ext {
        dockerConfiguration = { int port ->
            dependsOn 'build'
            dryRun true
            addFile("${libsDir}/${project.name}-${buildNrLoc}.jar", "/${project.name}/${project.name}.jar")
            exposePort(port)
            // Random beacuse of https://wiki.apache.org/tomcat/HowTo/FasterStartUp
            entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', "/${project.name}/${project.name}.jar"])
        }
        createDockerTaskWithPort = { int port ->
            project.task([type: Docker], "docker", ext.dockerConfiguration.curry(port))
        }
    }

    ext {
        buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "CD-000"
    }

    group = 'io.spring.cloud.samples.brewery'
    version = buildNrLoc

    sourceSets.main.java.srcDirs = []
    sourceSets.main.groovy.srcDirs += ["src/main/java"]

    sourceCompatibility = '1.8'

    configurations {
        all {
            resolutionStrategy {
                eachDependency { DependencyResolveDetails details ->
                    // To prevent an accidental usage of groovy-all.jar and groovy.jar in different versions
                    // all modularized Groovy jars are replaced with groovy-all.jar by default.
                    if (details.requested.group == 'org.codehaus.groovy' && details.requested.name != "groovy-all") {
                        details.useTarget("org.codehaus.groovy:groovy-all:${details.requested.version}")
                    }
                    if (details.requested.name == 'servlet-api') {
                        details.useTarget("org.apache.tomcat.embed:tomcat-embed-core:8.0.23")
                    }
                }
            }
        }
    }

    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "http://repo.spring.io/snapshot"
        }
        maven {
            url "http://repo.spring.io/milestone"
        }
    }

    dependencies {
        compile 'org.projectlombok:lombok:1.16.6'
        compile "org.springframework.boot:spring-boot-starter-web"
        compile "org.springframework:spring-web"
        compile 'org.codehaus.groovy:groovy-all:2.4.5'
        compile 'com.google.guava:guava:18.0'
        compile 'org.apache.tomcat.embed:tomcat-embed-core:8.0.23'
        compile "org.springframework.cloud:spring-cloud-starter-zipkin:$SLEUTH"
    }
}

configure([commonProject, acceptanceTestsProject]) {

    bootRepackage {
        enabled = false
    }

    bootRun {
        enabled = false
    }
}

List<String> systemPropsFromGradle() {
    return project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
}

configure(subprojects - commonProject) {

    dependencies {
        compile(commonProject)

        compile "org.springframework.boot:spring-boot-starter-web"
        compile "org.springframework.boot:spring-boot-starter-actuator"
        compile "org.springframework:spring-context-support"
        compile 'com.fasterxml.jackson.core:jackson-databind'
        if (defaultSettingsApplied() || whatToTest('ZOOKEEPER') || whatToTest('SLEUTH')) {
            compile "org.springframework.cloud:spring-cloud-starter-zookeeper-discovery:$ZOOKEEPER"
        }
        if (whatToTest('CONSUL')) { compile "org.springframework.cloud:spring-cloud-starter-consul-discovery:$CONSUL" }
        if (whatToTest('EUREKA')) { compile "org.springframework.cloud:spring-cloud-starter-eureka-discovery:$EUREKA" }
        compile "org.springframework.cloud:spring-cloud-starter-feign:+"
        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonMapper"
        compile "org.codehaus.jackson:jackson-core-asl:$jacksonMapper"
        compile 'org.apache.commons:commons-lang3:3.4'
        compile 'org.apache.tomcat.embed:tomcat-embed-el'
        compile 'com.jayway.jsonpath:json-path-assert:2.0.0'
        compile 'org.yaml:snakeyaml'
        compile 'org.hibernate:hibernate-validator'
        compile "org.aspectj:aspectjrt"
        compile 'org.codehaus.gpars:gpars:1.2.1'
        compile 'net.sf.ehcache:ehcache:2.10.1'
        compile 'org.jolokia:jolokia-core'

        runtime 'cglib:cglib-nodep:3.1'
        runtime 'org.objenesis:objenesis:2.2'
        runtime 'org.aspectj:aspectjweaver'

        testCompile 'com.jayway.awaitility:awaitility:1.6.5'
        testCompile('com.github.tomakehurst:wiremock:2.0.4-beta') {
            exclude group: 'org.mortbay.jetty', module: 'servlet-api'
        }
        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "com.jayway.restassured:rest-assured:$restAssuredVersion"
        testCompile "com.jayway.restassured:spring-mock-mvc:$restAssuredVersion"
        testCompile( 'com.athaydes:spock-reports:1.2.7' ) {
            transitive = false // this avoids affecting your version of Groovy/Spock
        }
        testCompile "org.spockframework:spock-spring"
        testCompile( 'com.athaydes:spock-reports:1.2.7' ) {
            transitive = false // this avoids affecting your version of Groovy/Spock
        }
    }

    wrapper {
        gradleVersion '2.9'
    }

    bootRun {
        jvmArgs = systemPropsFromGradle()
    }

    test {
        jvmArgs systemPropsFromGradle()
        testLogging {
            exceptionFormat = 'full'
        }
    }
}

/*
task cleanAcceptanceTestsBuild << {
    File buildDir = new File(project.rootDir, 'acceptance-tests/build')
    if (buildDir.exists()) {
        buildDir.deleteDir()
    }
}

clean.dependsOn 'cleanAcceptanceTestsBuild'
*/

project(':acceptance-tests') {

    test {
        exclude '**/*.*'
    }

    task acceptanceTests(type: Test) {
        jvmArgs systemPropsFromGradle()
        testLogging {
            exceptionFormat = 'full'
        }
        include '**/*.*'

        group = "Verification"
        description = "Runs the acceptance tests"
    }
}

boolean whatToTest(String propName) {
    String whatToTestProp = "WHAT_TO_TEST"
    return propName.equalsIgnoreCase(project.gradle.startParameter.systemPropertiesArgs.get(whatToTestProp)) ?:
            propName.equalsIgnoreCase(System.getenv(whatToTestProp))
}

boolean defaultSettingsApplied() {
    String whatToTestProp = "WHAT_TO_TEST"
    return !project.gradle.startParameter.systemPropertiesArgs.containsKey(whatToTestProp) &&
            !System.getenv().containsKey(whatToTestProp)
}